import { LogSender } from './log-send';
import { SDK_VERSION } from '../config';
/*
trace : 서버 req/res
debug : client 생성 정보, offer/answer,
info : 메서드 call 정보
//warn : 카메라 권한 에러, 음... 그 외 서비스가 멈추지 않아도 되는 에러는??
error : 서버 에러, 그 외 모든 에러
*/
export const loggerSender = new LogSender();
const LogLevel = {
    trace: 0,
    debug: 1,
    info: 2,
    error: 3,
    off: 4,
};
const toNowDateString = () => {
    const now = new Date();
    const year = now.getFullYear();
    const month = now.getMonth() + 1;
    const date = now.getDate();
    const hour = now.getHours();
    const min = now.getMinutes();
    const sec = now.getSeconds();
    const millisecond = now.getMilliseconds();
    return `${year}.${month >= 10 ? month : '0' + month}.${date >= 10 ? date : '0' + date} `
        + `${hour >= 10 ? hour : '0' + hour}:${min >= 10 ? min : '0' + min}:${sec >= 10 ? sec : '0' + sec}.${millisecond}`;
};
const toISOString = () => {
    const now = new Date();
    return now.toISOString();
};
const toMsgString = (msg, level) => {
    const log = msg.map((log) => {
        if (typeof log === 'object') {
            log = JSON.stringify(log);
        }
        return log;
    }).join(' ');
    const method = 'CnL.Log';
    const params = {
        sdkVersion: 'web_' + SDK_VERSION,
        logs: [{
                date: toISOString(),
                level: level,
                message: log
            }]
    };
    loggerSender.send({ method, params }, true);
    return log;
};
;
export const logger = {
    logLevelNumber: 0,
    setLevel(logLevel) {
        this.logLevelNumber = LogLevel[logLevel];
    },
    trace(...msg) {
        if (this.logLevelNumber <= LogLevel.trace) {
            console.log(`[TRACE] [${toNowDateString()}]`, toMsgString(msg, 'trace'));
        }
        else {
            toMsgString(msg, 'trace');
        }
    },
    debug(...msg) {
        if (this.logLevelNumber <= LogLevel.debug) {
            console.log(`[DEBUG] [${toNowDateString()}]`, toMsgString(msg, 'debug'));
        }
        else {
            toMsgString(msg, 'debug');
        }
    },
    info(...msg) {
        if (this.logLevelNumber <= LogLevel.info) {
            console.log(`[INFO] [${toNowDateString()}]`, toMsgString(msg, 'information'));
        }
        else {
            toMsgString(msg, 'information');
        }
    },
    error(...msg) {
        if (this.logLevelNumber <= LogLevel.error) {
            console.error(`[ERROR] [${toNowDateString()}]`, toMsgString(msg, 'error'));
        }
        else {
            toMsgString(msg, 'error');
        }
    }
};
export const Loggable = (level) => {
    return (target, propertyKey, descriptor) => {
        const originalMethod = descriptor.value;
        descriptor.value = function (...args) {
            let log = '';
            try {
                log = '[method][' + target.constructor.name + '.' + propertyKey + ']' + ' arguments = ' + JSON.stringify(args);
            }
            catch (err) {
                const message = err.message;
                log = '[method][' + target.constructor.name + '.' + propertyKey + ']' + ' arguments = ' + message;
            }
            logger[level](log);
            return originalMethod.apply(this, args);
        };
        return descriptor;
    };
};
