var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Loggable } from '../../utils/logger';
import { Local } from './local';
export class LocalVideo extends Local {
    constructor(mediaStreamTrack, type, extraValue) {
        super(mediaStreamTrack, extraValue);
        this.hd = false;
        this.type = type;
        this.videoElements = [];
        this.cloneMediaStreamTracks = [];
    }
    attach(element = undefined) {
        if (!this.mediaStreamTrack) {
            return;
        }
        let videoElement;
        if (element) {
            videoElement = element;
        }
        else {
            videoElement = document.createElement('video');
        }
        const mediaStream = this.getMediaStream();
        videoElement.srcObject = mediaStream ? mediaStream : null;
        videoElement.autoplay = true;
        videoElement.playsInline = true;
        this.videoElements.push(videoElement);
        return videoElement;
    }
    detach() {
        this.videoElements.forEach(element => element.remove());
        this.videoElements = [];
    }
    stop() {
        this.mediaStreamTrack.stop();
        this.cloneMediaStreamTracks.forEach(track => track.stop());
        this.cloneMediaStreamTracks = [];
    }
    setHd(enabled) {
        this.hd = enabled;
    }
    _getCloneTrack() {
        const cloneTrack = this.getMediaStreamTrack().clone();
        this.cloneMediaStreamTracks.push(cloneTrack);
        return cloneTrack;
    }
}
__decorate([
    Loggable('debug')
], LocalVideo.prototype, "attach", null);
__decorate([
    Loggable('debug')
], LocalVideo.prototype, "detach", null);
__decorate([
    Loggable('info')
], LocalVideo.prototype, "stop", null);
__decorate([
    Loggable('info')
], LocalVideo.prototype, "setHd", null);
__decorate([
    Loggable('debug')
], LocalVideo.prototype, "_getCloneTrack", null);
