var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Loggable } from "../../utils/logger";
export class Local {
    constructor(mediaStreamTrack, extraValue) {
        this.streamId = -1;
        this.statusUpdateFn = () => Promise.resolve();
        this.mediaStreamTrack = mediaStreamTrack;
        this.extraValue = extraValue;
    }
    get isEnabled() {
        return this.mediaStreamTrack.enabled;
    }
    get kind() {
        return this.mediaStreamTrack.kind;
    }
    getMediaStreamTrack() {
        return this.mediaStreamTrack;
    }
    getMediaStream() {
        return new MediaStream([this.mediaStreamTrack]);
    }
    getStreamId() {
        return this.streamId;
    }
    getExtraValue() {
        return this.extraValue;
    }
    setExtraValue(value) {
        this.extraValue = value;
    }
    setEnabled(enabled) {
        return __awaiter(this, void 0, void 0, function* () {
            enabled = typeof enabled === 'boolean' ? enabled : true;
            if (enabled !== this.mediaStreamTrack.enabled) {
                this.mediaStreamTrack.enabled = enabled;
                yield this.statusUpdateFn({
                    streamId: this.streamId,
                    active: enabled,
                });
            }
        });
    }
    /**
     * @internal mute on/off 정보를 미디어 서버에 반영하기 위한 setup
     */
    _setStreamId(streamId, statusUpdateFn) {
        this.streamId = streamId;
        this.statusUpdateFn = statusUpdateFn;
    }
}
__decorate([
    Loggable('debug')
], Local.prototype, "getMediaStreamTrack", null);
__decorate([
    Loggable('debug')
], Local.prototype, "getMediaStream", null);
__decorate([
    Loggable('info')
], Local.prototype, "getStreamId", null);
__decorate([
    Loggable('info')
], Local.prototype, "getExtraValue", null);
__decorate([
    Loggable('info')
], Local.prototype, "setExtraValue", null);
__decorate([
    Loggable('info')
], Local.prototype, "setEnabled", null);
