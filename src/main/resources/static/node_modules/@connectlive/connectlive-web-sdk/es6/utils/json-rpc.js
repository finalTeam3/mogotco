import EventEmitter from 'eventemitter3';
import * as jsonrpc from 'jsonrpc-lite';
import { ROOM_API_VERSION } from '../config';
import { indexer } from './indexer';
export class JSONRpc {
    constructor() {
        this.emitter = new EventEmitter();
        this.methodMap = new Map();
        this.toStream = () => console.warn('Please set toStream function!');
    }
    /**
     * handle stringified message.
     * parse -> emit
     */
    handleMessage(stringified) {
        const parsedObjects = jsonrpc.parse(stringified);
        const isArray = Array.isArray(parsedObjects);
        const handleParsedObject = (parsedObject) => {
            const { payload } = parsedObject;
            const hasId = 'id' in payload;
            const hasMethod = 'method' in payload;
            if (hasId && !hasMethod) {
                // = success or error
                const id = String(payload.id);
                const method = this.methodMap.get(id);
                this.emitter.emit(id, payload);
                // FIXME: 아래 꼭 필요한건지 확인할 필요 있음
                if (method)
                    this.emitter.emit(method, payload);
                return;
            }
            if (hasMethod && !hasId) {
                // = notification
                const method = payload.method;
                return this.emitter.emit(method, payload);
            }
            console.error('invalid message', parsedObject);
        };
        if (!isArray) {
            handleParsedObject(parsedObjects);
        }
        else {
            parsedObjects.forEach(handleParsedObject);
        }
    }
    /**
     * Send json rpc message by using `toStream` function,
     * and receive result
     */
    call(method, params) {
        params.version = ROOM_API_VERSION;
        return new Promise(resolve => {
            const id = indexer.get().toString();
            this.methodMap.set(id, method);
            this.emitter.once(id, resolve);
            const requestObject = jsonrpc.request(id, method, params);
            this.toStream(requestObject);
        });
    }
    on(method, callback) {
        this.emitter.on(method, callback);
    }
    off(method, callback) {
        this.emitter.off(method, callback);
    }
}
