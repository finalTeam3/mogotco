import { RoomApiClient } from '../room/room-api-client';
import { CustomRTCIceCandidatePairStats, Session, SessionConfig } from './session';
export declare class DownSession extends Session {
    receiverTrackMap: ReceiverTrackMap;
    private fixedAudioReceiver;
    audioTransceivers: RTCRtpTransceiver[];
    oldAudioStats: DownStat[];
    oldVideoStats: DownStat[];
    oldCandidatePair: CustomRTCIceCandidatePairStats | null;
    constructor(roomApiClient: RoomApiClient, config: SessionConfig);
    addListeners(): void;
    getTrack(receiverId: string): MediaStreamTrack | undefined;
    getTracks(): any[];
    addReceiver(receivers: AddReceiverParams['receivers']): Promise<void>;
    getFixedAudioReceiver(): RTCRtpReceiver[];
    removeReceiver(receiverIds: string[]): Promise<void>;
    assignStream(receivers: AssignStreamParams['receivers']): Promise<void>;
    configureReceiver(receivers: ConfigureReceiverParams['receivers']): Promise<void>;
    private callAddReceiver;
    private callRemoveReceiver;
    private callSetAnswer;
    private callAssignStream;
    private _callConfigureReceiver;
    getStats(): Promise<DownStats>;
    _setOldAudioStats(stats: DownStat[]): void;
    _setOldVideoStats(stats: DownStat[]): void;
    _setOldCandidatePairStats(candidatePair: CustomRTCIceCandidatePairStats): void;
}
export declare type OnParticipantsInfoParams = {
    change: {
        fullData?: ParticipantsInfo_InitItem[];
        streamsAdded?: ParticipantsInfo_StreamsAddedItem[];
        streamsUpdated?: ParticipantsInfo_StreamsUpdatedItem[];
        streamsRemoved?: ParticipantsInfo_StreamsRemovedItem[];
        participantsEnter?: string[];
        participantsLeave?: string[];
    };
};
export declare type OnStreamChangedParams = {
    params: {
        receiverId: string;
        type: 'video' | 'audio';
        participantId: string;
        streamId: number;
    };
};
export declare type OnAudioLevelParams = {
    lvl: number;
    streamId: number;
}[];
declare type ParticipantsInfo_InitItem = {
    participantId: string;
    streams?: ParticipantStream[];
};
declare type ParticipantsInfo_StreamsAddedItem = {
    participantId: string;
} & ParticipantStream;
declare type ParticipantsInfo_StreamsUpdatedItem = {
    participantId: string;
} & Pick<ParticipantStream, 'streamId' | 'property'>;
declare type ParticipantsInfo_StreamsRemovedItem = {
    participantId: string;
} & Pick<ParticipantStream, 'streamId'>;
export declare type ParticipantStream = {
    streamId: number;
    media: 'video';
    type: 'none' | 'single' | 'multiple';
    extraValue?: string;
    property: {
        active: boolean;
        alwaysOn?: boolean;
    };
} | {
    streamId: number;
    media: 'audio';
    type: 'none' | 'single';
    extraValue?: string;
    property: {
        active: boolean;
        alwaysOn?: boolean;
    };
};
declare type AssignStreamParams = {
    receivers: Array<{
        receiverId: string;
        streamId: number;
    }>;
};
declare type AddReceiverParams = {
    negotiationId: string;
    receivers: Array<{
        type: 'audio' | 'video';
        streamId?: number;
    }>;
};
declare type Receiver = {
    receiverId: string;
    type: 'audio' | 'video';
};
export declare type OnUserMessageParams = {
    sender: string;
    message: string;
    type: string;
}[];
export declare type OnUpdatedReceivers = {
    name: 'init' | 'add' | 'remove';
    receivers: Receiver[];
};
declare type ReceiverTrackMap = {
    [receiverId: string]: MediaStreamTrack;
};
declare type ConfigureReceiverParams = {
    receivers: Array<{
        receiverId: string;
        pause?: boolean;
        profile?: 'l' | 'm' | 'h';
    }>;
};
declare type DownStat = {
    mid: string;
    inboundRtp: any;
    track: any;
};
export declare type DownStats = {
    candidatePair: CustomRTCIceCandidatePairStats;
    audioStats: DownStat[];
    videoStats: DownStat[];
};
export {};
