var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { HttpWithJSONRpc } from '../../utils/http-with-json-rpc';
import userAgentParser from '../../utils/user-agent';
import { SDK_VERSION } from '../../config';
import { Loggable } from '../../utils/logger';
import EventEmitter from 'eventemitter3';
import { ServerError } from '../../utils/error-exception';
export class RoomApiClient extends HttpWithJSONRpc {
    constructor() {
        super();
        this.emitter = new EventEmitter();
    }
    setRoomId(roomId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.roomId = roomId;
        });
    }
    ;
    setParticipantId(participantId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.participantId = participantId;
        });
    }
    ;
    sendEnterRoom() {
        return __awaiter(this, void 0, void 0, function* () {
            const os = userAgentParser.getOS();
            const browser = userAgentParser.getBrowser();
            const method = 'Room.EnterRoom';
            const params = {
                roomId: this.roomId,
                userInfo: {
                    sdkVersion: SDK_VERSION,
                    platform: 'web',
                    platformVersion: `${browser.name}/${browser.version}`,
                    osName: os.name,
                    osVersion: os.version,
                    deviceModel: '',
                }
            };
            const response = yield this.request({ method, params });
            if ('error' in response) {
                throw new Error(JSON.stringify(response.error));
            }
            this.sign = response.result.sign;
            return response;
        });
    }
    ;
    sendCreateSession(direction, index, sdp) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = 'Room.CreateSession';
            const params = {
                roomId: this.roomId,
                participantId: this.participantId,
                sign: this.sign,
                direction,
                index,
                desc: sdp,
            };
            const response = yield this.request({ method, params });
            if ('error' in response) {
                //에러시 복구 불가능 에러로 에러 이벤트 호출
                const error = new ServerError(response.error.code, response.error.message);
                this.emitter.emit('error', error);
                throw error;
            }
            return response;
        });
    }
    ;
    sendAddCandidate(direction, index, candidate) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = 'Room.AddCandidate';
            const params = {
                roomId: this.roomId,
                participantId: this.participantId,
                sign: this.sign,
                direction,
                index,
                candidate,
            };
            const response = yield this.request({ method, params });
            if ('error' in response) {
                const error = new ServerError(response.error.code, response.error.message);
                if (response.error.code === -23005) {
                    //에러시 복구 불가능 에러로 에러 이벤트 호출
                    this.emitter.emit('error', error);
                }
                throw error;
            }
            return response;
        });
    }
    ;
    sendRestartIce(direction, index, sdp) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = 'Room.RestartIce';
            const params = {
                roomId: this.roomId,
                participantId: this.participantId,
                sign: this.sign,
                direction,
                index,
                desc: sdp
            };
            const response = yield this.request({ method, params });
            if ('error' in response) {
                const error = new ServerError(response.error.code, response.error.message);
                if (response.error.code === -23005) {
                    //에러시 복구 불가능 에러로 에러 이벤트 호출
                    this.emitter.emit('error', error);
                }
                throw error;
            }
            return response;
        });
    }
    ;
    sendDestroySession(direction, index) {
        return __awaiter(this, void 0, void 0, function* () {
            const method = 'Room.DestroySession';
            const params = {
                roomId: this.roomId,
                participantId: this.participantId,
                sign: this.sign,
                direction,
                index,
            };
            const response = yield this.request({ method, params });
            if ('error' in response) {
                const error = new ServerError(response.error.code, response.error.message);
                if (response.error.code === -23005) {
                    //에러시 복구 불가능 에러로 에러 이벤트 호출
                    this.emitter.emit('error', error);
                }
                throw error;
            }
            return response;
        });
    }
    ;
    on(name, callback) {
        this.emitter.on(name, callback);
    }
}
__decorate([
    Loggable('info')
], RoomApiClient.prototype, "setRoomId", null);
__decorate([
    Loggable('info')
], RoomApiClient.prototype, "setParticipantId", null);
__decorate([
    Loggable('info')
], RoomApiClient.prototype, "sendEnterRoom", null);
__decorate([
    Loggable('debug')
], RoomApiClient.prototype, "sendCreateSession", null);
__decorate([
    Loggable('debug')
], RoomApiClient.prototype, "sendAddCandidate", null);
__decorate([
    Loggable('debug')
], RoomApiClient.prototype, "sendRestartIce", null);
__decorate([
    Loggable('info')
], RoomApiClient.prototype, "sendDestroySession", null);
