var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Loggable } from "../../utils/logger";
import { Remote } from "./remote";
export class RemoteAudio extends Remote {
    constructor(stream, participant) {
        super(participant.id);
        this.type = 'none';
        this.extraValue = '';
        this.audioId = -1;
        this.receiverId = '';
        this.active = true; //해당 참여자가 자신의 오디오의 active를 변경함
        this.audioId = stream.streamId;
        this.type = stream.type;
        this.extraValue = stream.extraValue;
        this.isAlwaysOn = stream.property.alwaysOn;
        this.active = stream.property.active;
    }
    getAudioId() {
        return this.audioId;
    }
    _setReceiverId(receiverId) {
        this.receiverId = receiverId;
    }
    _setAlwaysOn(alwaysOn) {
        this.isAlwaysOn = alwaysOn;
    }
    _setActive(active) {
        this.active = active;
    }
}
__decorate([
    Loggable('info')
], RemoteAudio.prototype, "getAudioId", null);
__decorate([
    Loggable('debug')
], RemoteAudio.prototype, "_setReceiverId", null);
__decorate([
    Loggable('info')
], RemoteAudio.prototype, "_setAlwaysOn", null);
__decorate([
    Loggable('info')
], RemoteAudio.prototype, "_setActive", null);
