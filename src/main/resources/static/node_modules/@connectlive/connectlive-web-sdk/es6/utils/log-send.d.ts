import * as jsonrpc from 'jsonrpc-lite';
declare type VersionParam = {
    version?: string;
};
declare type RequestParams = VersionParam & jsonrpc.RpcParams;
declare type JSONRpcRequestBody = {
    method: string;
    params: RequestParams;
};
declare type LogLevelDesc = 'verbose' | 'trace' | 'debug' | 'information' | 'warning' | 'error';
export declare class LogSender {
    private ws;
    private keepAliveInterval;
    private host;
    private token;
    private logLevelNumber;
    private reconnectPeriod;
    private reconnectTimeGap;
    collectionPeriod: number;
    createWebSocket(host: string, token: string): Promise<unknown>;
    reconnect(): Promise<void>;
    send<R = jsonrpc.Defined, E = jsonrpc.JsonRpcError>(body: JSONRpcRequestBody, isLog?: boolean): Promise<void>;
    clearKeepAliveTimer(): void;
    close(): void;
    destroy(): void;
    setLevel(logLevel: LogLevelDesc): void;
}
export declare type LogParams = {
    sdkVersion: string;
    logs: Array<{
        date: string;
        level: string;
        message: string;
    }>;
};
export declare type LocalAudioQualityMetricReport = {
    type: 'audio';
    streamId: number;
    bytesSent: number;
    packetsSent: number;
    srcAudioLevel: number;
};
export declare type LocalVideoQualityMetricReport = {
    type: 'video';
    streamId: number;
    profile: 'l' | 'm' | 'h';
    bytesSent: number;
    framesEncoded: number;
    framesSent: number;
    pliCount: number;
    srcFrames: number;
};
export declare type RemoteAudioQualityMetricReport = {
    type: 'audio';
    receiverId: number;
    streamId: number;
    bytesReceived: number;
    totalSamplesReceived: number;
    audioLevel: number;
    packetsLost: number;
};
export declare type RemoteVideoQualityMetricReport = {
    type: 'video';
    receiverId: number;
    streamId: number;
    bytesReceived: number;
    framesReceived: number;
    framesDecoded: number;
    packetsLost: number;
    pliCount: number;
};
export declare type QualityMetricReport = {
    direction: 'up' | 'down';
    index: number;
    metrics: Array<LocalAudioQualityMetricReport | LocalVideoQualityMetricReport | RemoteAudioQualityMetricReport | RemoteVideoQualityMetricReport>;
};
export declare type QualityMetricReportParams = {
    serviceId: string;
    roomId: string;
    participantId: string;
    sessions: QualityMetricReport[];
};
export {};
