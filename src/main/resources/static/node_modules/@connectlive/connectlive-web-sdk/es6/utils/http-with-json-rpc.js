var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as jsonrpc from 'jsonrpc-lite';
import { indexer } from './indexer';
import { logger } from './logger';
import { ClientError, ServerError } from './error-exception';
import { ROOM_API_VERSION } from '../config';
export class HttpWithJSONRpc {
    constructor() {
        this.headers = {};
        this.host = '';
    }
    setHost(host) {
        this.host = host;
    }
    setHeaders(headers) {
        this.headers = headers;
    }
    request(body, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { method, params } = body;
                if (method !== 'Provision' && method !== 'ExtendTTL') {
                    params.version = ROOM_API_VERSION;
                }
                const { httpMethod = 'post', path = '' } = options;
                const id = indexer.get().toString();
                const stringified = JSON.stringify(jsonrpc.request(id, method, params));
                const url = this.host + path;
                logger.trace(`[${method}] ${stringified}`);
                const res = yield fetch(url, Object.assign(Object.assign({}, this.headers), { method: httpMethod, body: stringified }));
                const data = (yield res.json());
                if (method !== 'Provision' && method !== 'ExtendTTL') {
                    if ('error' in data) {
                        logger.error(data);
                        const error = new ServerError(data.error.code, data.error.message);
                        throw error;
                    }
                }
                logger.trace(`[RESULT] ${JSON.stringify(data)}`);
                return data;
            }
            catch (err) {
                const e = err;
                const message = e.message;
                logger.error(message);
                const error = new ClientError(1904, 'HTTP 세션에 오류가 발생했습니다.', e);
                throw error;
            }
        });
    }
}
