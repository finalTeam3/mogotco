var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Loggable } from "../../utils/logger";
export class RemoteAudioElements {
    constructor() {
        this.audioReceivers = [];
        this.audioElements = [];
    }
    _setReceivers(audioReceivers) {
        this.audioReceivers = audioReceivers;
    }
    attach() {
        const audioElements = this.audioReceivers.map((audioReceiver) => {
            const audioElement = document.createElement('audio');
            audioElement.srcObject = this._getMediaStream(audioReceiver);
            audioElement.autoplay = true;
            return audioElement;
        });
        this.audioElements = this.audioElements.concat(audioElements);
        return this.audioElements;
    }
    detach() {
        this.audioElements.forEach(element => element.remove());
        this.audioElements = [];
    }
    _getMediaStream(audioReceiver) {
        const ms = new MediaStream();
        ms.addTrack(audioReceiver.track);
        return ms;
    }
    stop() {
        this.audioReceivers.forEach(audioReceiver => audioReceiver.track.stop());
    }
}
__decorate([
    Loggable('debug')
], RemoteAudioElements.prototype, "_setReceivers", null);
__decorate([
    Loggable('debug')
], RemoteAudioElements.prototype, "attach", null);
__decorate([
    Loggable('debug')
], RemoteAudioElements.prototype, "detach", null);
__decorate([
    Loggable('debug')
], RemoteAudioElements.prototype, "_getMediaStream", null);
__decorate([
    Loggable('info')
], RemoteAudioElements.prototype, "stop", null);
