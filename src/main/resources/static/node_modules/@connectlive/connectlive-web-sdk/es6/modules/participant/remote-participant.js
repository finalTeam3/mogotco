var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { filterToArray, some, objectToArray } from '../../utils/object-util';
import { RemoteVideo } from '../remote/remote-video';
import { RemoteAudio } from '../remote/remote-audio';
import { Loggable } from '../../utils/logger';
export class RemoteParticipant {
    constructor(participantId, trackFn, streams = []) {
        this.streamIdMap = {};
        this.audioMap = {};
        this.videoMap = {};
        this.id = participantId;
        this.getTrackFn = trackFn;
        this.streamIdMap = streams.reduce((streamIdMap, stream) => {
            streamIdMap[stream.streamId] = stream;
            if (stream.media === 'video') {
                this.videoMap[stream.streamId] = new RemoteVideo(stream, this);
            }
            else if (stream.media === 'audio') {
                this.audioMap[stream.streamId] = new RemoteAudio(stream, this);
            }
            return streamIdMap;
        }, {});
    }
    get hasAudio() {
        return some(this.streamIdMap, s => s.media === 'audio');
    }
    get hasVideo() {
        return some(this.streamIdMap, s => s.media === 'video');
    }
    get audios() {
        const remoteAudios = objectToArray(this.audioMap);
        return remoteAudios;
    }
    get videos() {
        const remoteVideos = objectToArray(this.videoMap);
        return remoteVideos;
    }
    get isEnabledVideo() {
        return some(this.streamIdMap, s => s.media === 'video' && s.property.active);
    }
    get isEnabledAudio() {
        return some(this.streamIdMap, s => s.media === 'audio' && s.property.active);
    }
    _getSubscribedStreamIds() {
        return this._getFilterStreamIds().assigned;
    }
    _getUnsubscribedStreamIds() {
        return this._getFilterStreamIds().notAssigned;
    }
    getSubscribedVideos() {
        const videoStreams = this._getFilterStreams().assigned;
        const videos = videoStreams.map(stream => this.videoMap[stream.streamId]);
        return videos;
    }
    getUnsubscribedVideos() {
        const videoStreams = this._getFilterStreams().notAssigned;
        const videos = videoStreams.map(stream => this.videoMap[stream.streamId]);
        return videos;
    }
    getAudio(streamId) {
        return this.audioMap[streamId];
    }
    getVideo(streamId) {
        return this.videoMap[streamId];
    }
    _getVideoStreamIdAll() {
        const streamIds = filterToArray(this.streamIdMap, s => s.media === 'video').map(s => s.streamId);
        return streamIds;
    }
    _getVideoStreamAll() {
        const streams = filterToArray(this.streamIdMap, s => s.media === 'video');
        return streams;
    }
    _getFilterStreamIds() {
        const videoStreams = this._getVideoStreamIdAll();
        const videoTracks = videoStreams.map(id => this.getTrackFn(id));
        return {
            assigned: videoStreams.filter((_, i) => !!videoTracks[i]),
            notAssigned: videoStreams.filter((_, i) => !videoTracks[i]),
        };
    }
    _getFilterStreams() {
        const videoStreams = this._getVideoStreamAll();
        const videoTracks = videoStreams.map(stream => this.getTrackFn(stream.streamId));
        return {
            assigned: videoStreams.filter((_, i) => !!videoTracks[i]),
            notAssigned: videoStreams.filter((_, i) => !videoTracks[i]),
        };
    }
    /**
     * @internal
     */
    _addStream(stream) {
        this.streamIdMap[stream.streamId] = stream;
        if (stream.media === 'video') {
            this.videoMap[stream.streamId] = new RemoteVideo(stream, this);
        }
        else if (stream.media === 'audio') {
            this.audioMap[stream.streamId] = new RemoteAudio(stream, this);
        }
    }
    /**
     * @internal
     */
    _updateStream({ streamId, property }) {
        const next = Object.assign(Object.assign({}, this.streamIdMap[streamId]), { property });
        this.streamIdMap[streamId] = next;
    }
    /**
     * @internal
     */
    _removeStream(streamId) {
        delete this.streamIdMap[streamId];
        delete this.videoMap[streamId];
        delete this.audioMap[streamId];
    }
}
__decorate([
    Loggable('debug')
], RemoteParticipant.prototype, "_getSubscribedStreamIds", null);
__decorate([
    Loggable('debug')
], RemoteParticipant.prototype, "_getUnsubscribedStreamIds", null);
__decorate([
    Loggable('info')
], RemoteParticipant.prototype, "getSubscribedVideos", null);
__decorate([
    Loggable('info')
], RemoteParticipant.prototype, "getUnsubscribedVideos", null);
__decorate([
    Loggable('debug')
], RemoteParticipant.prototype, "getAudio", null);
__decorate([
    Loggable('debug')
], RemoteParticipant.prototype, "getVideo", null);
__decorate([
    Loggable('debug')
], RemoteParticipant.prototype, "_getVideoStreamIdAll", null);
__decorate([
    Loggable('debug')
], RemoteParticipant.prototype, "_getVideoStreamAll", null);
__decorate([
    Loggable('debug')
], RemoteParticipant.prototype, "_getFilterStreamIds", null);
__decorate([
    Loggable('debug')
], RemoteParticipant.prototype, "_getFilterStreams", null);
__decorate([
    Loggable('debug')
], RemoteParticipant.prototype, "_addStream", null);
__decorate([
    Loggable('debug')
], RemoteParticipant.prototype, "_updateStream", null);
__decorate([
    Loggable('debug')
], RemoteParticipant.prototype, "_removeStream", null);
