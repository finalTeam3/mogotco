import { ParticipantStream } from '../session/down-session';
import { RemoteVideo } from '../remote/remote-video';
import { RemoteAudio } from '../remote/remote-audio';
export declare class RemoteParticipant {
    id: string;
    streamIdMap: StreamIdMap;
    audioMap: RemoteAudioMap;
    videoMap: RemoteVideoMap;
    getTrackFn: GetRemoteVideoMediaStreamTrackFn;
    constructor(participantId: string, trackFn: GetRemoteVideoMediaStreamTrackFn, streams?: ParticipantStream[]);
    get hasAudio(): boolean;
    get hasVideo(): boolean;
    get audios(): any[];
    get videos(): any[];
    get isEnabledVideo(): boolean;
    get isEnabledAudio(): boolean;
    _getSubscribedStreamIds(): number[];
    _getUnsubscribedStreamIds(): number[];
    getSubscribedVideos(): RemoteVideo[];
    getUnsubscribedVideos(): RemoteVideo[];
    getAudio(streamId: number): RemoteAudio;
    getVideo(streamId: number): RemoteVideo;
    private _getVideoStreamIdAll;
    private _getVideoStreamAll;
    private _getFilterStreamIds;
    private _getFilterStreams;
    /**
     * @internal
     */
    _addStream(stream: ParticipantStream): void;
    /**
     * @internal
     */
    _updateStream({ streamId, property }: Pick<ParticipantStream, 'streamId' | 'property'>): void;
    /**
     * @internal
     */
    _removeStream(streamId: number): void;
}
declare type StreamIdMap = {
    [streamId: ParticipantStream['streamId']]: ParticipantStream;
};
declare type RemoteAudioMap = {
    [streamId: ParticipantStream['streamId']]: RemoteAudio;
};
declare type RemoteVideoMap = {
    [streamId: ParticipantStream['streamId']]: RemoteVideo;
};
export declare type GetRemoteVideoMediaStreamTrackFn = (streamId: number) => MediaStreamTrack | undefined;
export {};
