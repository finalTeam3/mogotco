var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Loggable } from '../../utils/logger';
import { Local } from './local';
export class LocalAudio extends Local {
    constructor(mediaStreamTrack, type, extraValue) {
        super(mediaStreamTrack, extraValue);
        this.isAlwaysOn = false;
        this.type = type;
    }
    stop() {
        this.mediaStreamTrack.stop();
    }
    setAlwaysOn(enabled) {
        return __awaiter(this, void 0, void 0, function* () {
            this.isAlwaysOn = typeof enabled === 'boolean' ? enabled : true;
            yield this.statusUpdateFn({
                streamId: this.streamId,
                alwaysOn: this.isAlwaysOn,
            });
        });
    }
}
__decorate([
    Loggable('info')
], LocalAudio.prototype, "stop", null);
__decorate([
    Loggable('info')
], LocalAudio.prototype, "setAlwaysOn", null);
