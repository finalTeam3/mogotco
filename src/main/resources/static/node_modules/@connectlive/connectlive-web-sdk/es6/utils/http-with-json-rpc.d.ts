import * as jsonrpc from 'jsonrpc-lite';
declare type HttpHeaders = RequestInit;
declare type RequestOptions = {
    httpMethod?: RequestInit['method'];
    path?: string;
};
declare type VersionParam = {
    version?: string;
};
declare type RequestParams = VersionParam & jsonrpc.RpcParams;
declare type JSONRpcRequestBody = {
    method: string;
    params: RequestParams;
};
declare type SuccessObject<T> = Omit<jsonrpc.SuccessObject, 'result'> & {
    result: T;
};
declare type ErrorObject<T> = Omit<jsonrpc.ErrorObject, 'error'> & {
    error: T;
};
declare type ServerErrorObject = {
    code: number;
    data: any;
    message: string;
};
export declare class HttpWithJSONRpc {
    private headers;
    private host;
    setHost(host: string): void;
    setHeaders(headers: HttpHeaders): void;
    protected request<R = jsonrpc.Defined, E = jsonrpc.JsonRpcError>(body: JSONRpcRequestBody, options?: RequestOptions): Promise<SuccessObject<R> | ErrorObject<ServerErrorObject>>;
}
export {};
