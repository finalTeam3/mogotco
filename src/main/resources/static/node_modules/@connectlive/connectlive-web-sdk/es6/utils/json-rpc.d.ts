import * as jsonrpc from 'jsonrpc-lite';
export declare type RequestObject = jsonrpc.RequestObject | jsonrpc.NotificationObject;
export declare type SuccessObject<T> = Omit<jsonrpc.SuccessObject, 'result'> & {
    result: T;
};
export declare type ErrorObject<T> = Omit<jsonrpc.ErrorObject, 'error'> & {
    error: T;
};
export declare type NotificationObject<T> = Omit<jsonrpc.NotificationObject, 'params'> & {
    params: T;
};
export declare type NotificationCallback<T> = (notification: NotificationObject<T>) => void;
declare type VersionParam = {
    version?: string;
};
declare type RequestParams = VersionParam & jsonrpc.RpcParams;
export declare class JSONRpc {
    private emitter;
    private methodMap;
    toStream: (payload: RequestObject) => void;
    constructor();
    /**
     * handle stringified message.
     * parse -> emit
     */
    handleMessage(stringified: string): void;
    /**
     * Send json rpc message by using `toStream` function,
     * and receive result
     */
    call<R = jsonrpc.Defined, E = jsonrpc.JsonRpcError>(method: string, params: RequestParams): Promise<SuccessObject<R> | ErrorObject<E>>;
    on<T = jsonrpc.RpcParams>(method: string, callback: NotificationCallback<T>): void;
    off<T = jsonrpc.RpcParams>(method: string, callback: NotificationCallback<T>): void;
}
export {};
