import EventEmitter from 'eventemitter3';
import { JSONRpc } from '../../utils/json-rpc';
import { RoomApiClient } from '../room/room-api-client';
import { UpStats } from './up-session';
import { DownStats } from './down-session';
declare type SessionDirection = 'up' | 'down';
export declare abstract class Session {
    protected peerConnection: RTCPeerConnection;
    protected dataChannel: RTCDataChannel;
    protected emitter: EventEmitter;
    protected jsonrpc: JSONRpc;
    protected roomApiClient: RoomApiClient;
    protected direction: SessionDirection;
    index: number;
    private restartIceInterval;
    config: SessionConfig;
    constructor(apiClient: RoomApiClient, direction: SessionDirection, config: SessionConfig);
    create(rtcConfig?: RTCConfiguration): Promise<void>;
    destroy(): Promise<void>;
    close(): Promise<void>;
    on<T = any>(name: string, callback: (eventData: T) => void): void;
    off<T = any>(name: string, callback: (eventData: T) => void): void;
    protected abstract addListeners(): void;
    private createPeerConnection;
    private createDataChannel;
    private _restartIceTimerStart;
    private _restartIceTimerStop;
    private _restartIce;
    getAllStats(): Promise<Stats>;
    abstract getStats(): Promise<UpStats | DownStats>;
}
export declare type Stats = {
    [index: string]: any;
};
export declare type SessionConfig = {
    cpuOveruseDetection?: boolean;
    maxFramerate?: {
        l: number;
        m: number;
        h: number;
    };
    voiceMode: boolean;
};
export declare type CustomRTCIceCandidatePairStats = RTCIceCandidatePairStats & {
    packetsSent: number;
    packetsReceived: number;
};
export {};
