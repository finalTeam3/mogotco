var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ClientError } from '../../utils/error-exception';
import { Loggable } from '../../utils/logger';
import { Remote } from './remote';
export class RemoteVideo extends Remote {
    constructor(stream, participant) {
        super(participant.id);
        this.type = 'none';
        this.extraValue = '';
        this.videoId = -1;
        this.receiverId = '';
        this.paused = false; //내가 수신하지 않음
        this.active = true; //해당 참여자가 자신의 비디오의 active를 변경함
        this.profile = 'l';
        this.statusUpdateFn = () => Promise.resolve();
        this.videoId = stream.streamId;
        this.videoElements = [];
        this.type = stream.type;
        this.extraValue = stream.extraValue || '';
    }
    get isEnabled() {
        var _a;
        return (_a = this.mediaStreamTrack) === null || _a === void 0 ? void 0 : _a.enabled;
    }
    _setType(type) {
        this.type = type;
    }
    _setRemoteTrack(mediaStreamTrack) {
        this.mediaStreamTrack = mediaStreamTrack;
    }
    attach(element = undefined) {
        if (!this.mediaStreamTrack) {
            return;
        }
        let videoElement;
        if (element) {
            videoElement = element;
        }
        else {
            videoElement = document.createElement('video');
        }
        const mediaStream = this.getMediaStream();
        videoElement.srcObject = mediaStream ? mediaStream : null;
        videoElement.autoplay = true;
        videoElement.playsInline = true;
        this.videoElements.push(videoElement);
        return videoElement;
    }
    detach() {
        this.videoElements.forEach(element => element.remove());
        this.videoElements = [];
    }
    getMediaStreamTrack() {
        return this.mediaStreamTrack;
    }
    getMediaStream() {
        if (this.mediaStreamTrack) {
            return new MediaStream([this.mediaStreamTrack]);
        }
    }
    getVideoId() {
        return this.videoId;
    }
    _setVideoId(streamId) {
        this.videoId = streamId;
    }
    _setReceiverId(receiverId, statusUpdateFn) {
        this.receiverId = receiverId;
        this.statusUpdateFn = statusUpdateFn;
    }
    _setActive(enabled) {
        this.active = enabled;
    }
    setPaused(enabled) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.mediaStreamTrack) {
                enabled = typeof enabled === 'boolean' ? enabled : true;
                this.paused = enabled;
                if (enabled !== this.mediaStreamTrack.enabled) {
                    this.mediaStreamTrack.enabled = enabled;
                    yield this.statusUpdateFn({
                        receiverId: this.receiverId,
                        pause: enabled,
                    });
                }
            }
        });
    }
    setQuality(quality) {
        return __awaiter(this, void 0, void 0, function* () {
            if (quality !== 'l' && quality !== 'm' && quality !== 'h') {
                throw new ClientError(1207, "비디오 품질 변경 인자는 'l', 'm', ''h 중 하나여야 합니다.");
            }
            if (quality) {
                this.profile = quality;
                yield this.statusUpdateFn({
                    receiverId: this.receiverId,
                    profile: quality,
                });
            }
        });
    }
}
__decorate([
    Loggable('info')
], RemoteVideo.prototype, "_setType", null);
__decorate([
    Loggable('info')
], RemoteVideo.prototype, "_setRemoteTrack", null);
__decorate([
    Loggable('info')
], RemoteVideo.prototype, "attach", null);
__decorate([
    Loggable('info')
], RemoteVideo.prototype, "detach", null);
__decorate([
    Loggable('info')
], RemoteVideo.prototype, "getMediaStreamTrack", null);
__decorate([
    Loggable('info')
], RemoteVideo.prototype, "getMediaStream", null);
__decorate([
    Loggable('info')
], RemoteVideo.prototype, "getVideoId", null);
__decorate([
    Loggable('info')
], RemoteVideo.prototype, "_setVideoId", null);
__decorate([
    Loggable('debug')
], RemoteVideo.prototype, "_setReceiverId", null);
__decorate([
    Loggable('info')
], RemoteVideo.prototype, "_setActive", null);
__decorate([
    Loggable('info')
], RemoteVideo.prototype, "setPaused", null);
__decorate([
    Loggable('info')
], RemoteVideo.prototype, "setQuality", null);
