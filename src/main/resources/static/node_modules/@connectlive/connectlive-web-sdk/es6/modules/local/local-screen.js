var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ClientError } from '../../utils/error-exception';
import { Loggable, logger } from '../../utils/logger';
import { LocalAudio } from './local-audio';
import { LocalVideo } from './local-video';
class LocalScreen {
    constructor(constraints = {}) {
        this.room = null;
        this.audio = undefined;
        this.video = undefined;
        if (constraints.video) {
            if (constraints.video === true)
                constraints.video = {};
        }
        if (constraints.audio) {
            if (constraints.audio === true)
                constraints.audio = {};
        }
        this.constraints = constraints;
    }
    switchDisplay() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.constraints) {
                if (this.constraints.video) {
                    if (this.room && this.video) {
                        yield this.room.unpublish([this]);
                    }
                    yield this._getDisplayMedia();
                    if (this.room && this.video)
                        this.room.publish([this]);
                }
            }
        });
    }
    _getDisplayMedia() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.stop();
            try {
                const mediaStream = yield navigator.mediaDevices.getDisplayMedia(this.constraints);
                const [audioTrack] = mediaStream.getAudioTracks();
                const [videoTrack] = mediaStream.getVideoTracks();
                this.audio = audioTrack ? new LocalAudio(audioTrack, 'single') : undefined;
                this.video = videoTrack ? new LocalVideo(videoTrack, 'single') : undefined;
                logger.debug('got display stream', 'id=' + mediaStream.id, 'active=' + mediaStream.active);
                if (audioTrack) {
                    logger.debug('got display audio track', 'id=' + audioTrack.id, 'label=' + audioTrack.label, 'enabled=' + audioTrack.enabled, 'kind=' + audioTrack.kind, 'muted=' + audioTrack.muted, 'readyState=' + audioTrack.readyState);
                    if (audioTrack.readyState === 'ended') {
                        throw new ClientError(1205, '오디오 트랙을 획득했지만 종료 상태입니다.');
                    }
                }
                if (videoTrack) {
                    logger.debug('got display video track', 'id=' + videoTrack.id, 'label=' + videoTrack.label, 'enabled=' + videoTrack.enabled, 'kind=' + videoTrack.kind, 'muted=' + videoTrack.muted, 'readyState=' + videoTrack.readyState);
                    if (videoTrack.readyState === 'ended') {
                        throw new ClientError(1205, '비디오 트랙을 획득했지만 종료 상태입니다.');
                    }
                }
                (_a = this.video) === null || _a === void 0 ? void 0 : _a.setHd(true);
                if (audioTrack)
                    logger.debug('got display media track', 'id=' + audioTrack.id, 'label=' + audioTrack.label, 'enabled=' + audioTrack.enabled, 'kind=' + audioTrack.kind, 'muted=' + audioTrack.muted, 'readyState=' + audioTrack.readyState);
                if (videoTrack)
                    logger.debug('got display media track', 'id=' + videoTrack.id, 'label=' + videoTrack.label, 'enabled=' + videoTrack.enabled, 'kind=' + videoTrack.kind, 'muted=' + videoTrack.muted, 'readyState=' + videoTrack.readyState);
            }
            catch (err) {
                const e = err;
                const message = e.message;
                logger.error('Failed to getDisplayMedia. ', e.name, message);
                throw new ClientError(1204, `getDisplayMedia 실패(${message})`, e);
            }
        });
    }
    stop() {
        var _a, _b;
        (_a = this.audio) === null || _a === void 0 ? void 0 : _a.stop();
        (_b = this.video) === null || _b === void 0 ? void 0 : _b.stop();
    }
    _setRoom(room) {
        this.room = room;
    }
}
__decorate([
    Loggable('debug')
], LocalScreen.prototype, "switchDisplay", null);
__decorate([
    Loggable('info')
], LocalScreen.prototype, "_getDisplayMedia", null);
__decorate([
    Loggable('info')
], LocalScreen.prototype, "stop", null);
export { LocalScreen };
