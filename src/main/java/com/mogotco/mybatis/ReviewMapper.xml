<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mogotco.mapper.ReviewMapper">

	<insert id="insert" parameterType="reviewDTO">
		INSERT INTO review
		VALUES(NULL, #{mentoringid}, #{userid}, #{rating}, #{reviewcon},
		sysdate())
	</insert>

	<update id="update" parameterType="reviewDTO">
		UPDATE review SET rating =
		#{rating}, reviewcon = #{reviewcon}
		WHERE reviewid = #{reviewid}
	</update>

	<delete id="delete" parameterType="Integer">
		DELETE FROM review WHERE
		reviewid = #{reviewid}
	</delete>

	<select id="select" parameterType="Integer"
		resultType="reviewDTO">
		SELECT * FROM review WHERE reviewid = #{reviewid}
	</select>

	<select id="selectAll" resultType="reviewDTO">
		SELECT * FROM review
	</select>
	
	<!-- 멘토상세페이지에서 해당 멘토 리뷰조회 -->
	<select id="getmentorreview" parameterType="Integer"
		resultType="reviewDTO">
		SELECT m.userid AS mentor_userid, r.userid, r.rating, r.reviewcon, r.reviewdate, m.mentorid AS mentor_mentorid 
		FROM review r
		INNER JOIN mentoring ming ON r.mentoringid = ming.mentoringid
		INNER JOIN mentor m ON ming.mentorid = m.mentorid
		WHERE m.mentorid = #{mentorid}
	</select>

	<!-- 개인 mentor 평점 avg(choyunyoung add) -->
	<select id="indivirating" parameterType="Integer" resultType="reviewDTO">
		SELECT m.mentorid, ROUND(avg(r.rating),1) AS
		avgrate
		FROM review r
		INNER JOIN mentoring men ON
		r.mentoringid=men.mentoringid
		INNER JOIN mentor m ON men.mentorid=m.mentorid
		INNER
		JOIN user u ON
		r.userid=u.userid
		WHERE men.mentorid = #{mentorid}
	</select>

	<!-- mentor전체들의 평점 avg(choyunyoung add)(4명 순서대로) -->
	<select id="topmentors" resultType="reviewDTO">
		SELECT m.mentorid AS
		mentor_mentorid,m.userid AS mentor_userid, m.mentorimg AS
		mentor_mentorimg,m.mentorcom AS mentor_mentorcom,
		u.snsinsta AS user_snsinsta, u.snsgit AS user_snsgit,
		ROUND(avg(r.rating),1) AS avgrate FROM mentor m
		INNER JOIN mentoring
		men ON m.mentorid=men.mentorid
		INNER JOIN review r ON
		men.mentoringid=r.mentoringid
		INNER JOIN user u ON m.userid=u.userid
		GROUP BY m.mentorid ORDER BY avgrate DESC LIMIT 4
	</select>

	<!-- mentor들의 cate뽑기(review에 있음)(choyunyoung add) -->
	<select id="mentorwish" parameterType="Integer" resultType="reviewDTO">
		SELECT me.mentorid AS mentor_mentorid, m.mcateid AS mcate_mcateid, m.mname
		AS mcate_mname FROM mcate m
		INNER JOIN mwishcate mw ON m.mcateid = mw.mcateid
		INNER JOIN mentor me ON mw.mentorid=me.mentorid
		WHERE me.mentorid = #{mentorid}
	</select>
	
	<!-- 개인 멘토 리뷰 개수 -->
	<select id="reviewcnt" parameterType="Integer" resultType="reviewDTO">
		SELECT COUNT(*) AS reviewcnt, COUNT(*) AS viewreviewcnt FROM review r
		INNER JOIN mentoring ming ON r.mentoringid = ming.mentoringid
		INNER JOIN mentor m ON ming.mentorid = m.mentorid
		WHERE m.mentorid = #{mentorid}
	</select>
	
	<!-- 멘토상세페이지에서 star 별 리뷰 갯수 조회 -->
	<select id="starcnt" parameterType="Integer" resultType="reviewDTO">
		SELECT COUNT(case when rating = '5' then 1 end) AS star5cnt, COUNT(case when rating = '5' then 1 end) AS viewstar5cnt, 
		COUNT(case when rating = '4' then 1 end) AS star4cnt, COUNT(case when rating = '4' then 1 end) AS viewstar4cnt, 
		COUNT(case when rating = '3' then 1 end) AS star3cnt, COUNT(case when rating = '3' then 1 end) AS viewstar3cnt, 
		COUNT(case when rating = '2' then 1 end) AS star2cnt, COUNT(case when rating = '2' then 1 end) AS viewstar2cnt, 
		COUNT(case when rating = '1' then 1 end) AS star1cnt, COUNT(case when rating = '1' then 1 end) AS viewstar1cnt FROM review r
		INNER JOIN mentoring ming ON r.mentoringid = ming.mentoringid
		INNER JOIN mentor m ON ming.mentorid = m.mentorid
		WHERE m.mentorid = #{mentorid}
	</select>
	
</mapper>